<?php

/**
 * @file
 * Replace the default multi-select boxes with two pannel list and search.
 */

/**
 * Implements template_preprocess_page().
 */
function improved_multi_select_preprocess_page() {
  return;
  $is_enabled = FALSE;
  $url = trim(variable_get('improved_multi_select:url', ''));
  $selectors = array_filter(explode("\n", str_replace("\r", "\n", trim(variable_get('improved_multi_select:selectors', '')))));

  if ($replace_all = variable_get('improved_multi_select:isall', FALSE)) {
    $is_enabled = TRUE;
  }
  else {
    if (($url && drupal_match_path(request_path(), $url)) || $selectors) {
      $is_enabled = TRUE;
    }
  }

  if ($is_enabled) {
    $selectors = improved_multi_select_load_selectors($replace_all, $selectors);
    drupal_add_css(drupal_get_path('module', 'improved_multi_select') . '/improved_multi_select.css');
    drupal_add_js(drupal_get_path('module', 'improved_multi_select') . '/improved_multi_select.js');
    drupal_add_js(array(
      'improved_multi_select' => array(
        'selectors' => $selectors,
        'filtertype' => variable_get('improved_multi_select:filtertype', 'partial'),
        'orderable' => variable_get('improved_multi_select:orderable', FALSE),
        'groupresetfilter' => variable_get('improved_multi_select:groupresetfilter', FALSE),
        'buttontext_add' => variable_get('improved_multi_select:buttontext_add', '>'),
        'buttontext_addall' => variable_get('improved_multi_select:buttontext_addall', '»'),
        'buttontext_del' => variable_get('improved_multi_select:buttontext_del', '<'),
        'buttontext_delall' => variable_get('improved_multi_select:buttontext_delall', '«'),
        'buttontext_moveup' => variable_get('improved_multi_select:buttontext_moveup', 'Move up'),
        'buttontext_movedown' => variable_get('improved_multi_select:buttontext_movedown', 'Move down'),
      ),
    ), 'setting');
  }
}

/**
 * Return array of jQuery selectors from jQuery selectors or 'replace all' option.
 *
 * @param $replace_all
 *   Boolean indicating if all multiselects will be replaced.
 * @param $selectors
 *   Array with jQuery selectors.
 *
 * @return
 *   Array with jQuery selectors.
 */
function improved_multi_select_load_selectors($replace_all, $selectors) {
  $output = array();
  if (!empty($selectors) and !$replace_all) {
    foreach ($selectors as $selector) {
      $output[] = $selector;
    }
  }
  else {
    $output = array('select[multiple]');
  }
  return $output;
}
